

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "hardhat/console.sol";

contract MainSupplyChain {

  address public owner;

  constructor() {
    owner = msg.sender;
  }

  modifier onlyOwner() {
    require (owner == msg.sender, "Sorry, you don't have authorization to access the data");
    _;
  } 

  modifier onlyFactory() { 
    require(userRoles[msg.sender] == en_roles.Pabrik, "Sorry, you don't have authorized to access this!");
    _;
  }

  modifier onlyBPOM() {
    require(userRoles[msg.sender] == en_roles.BPOM, "Sorry, you don't have authorized to access this!");
    _;
  }

  modifier onlyPBF() {
    require(userRoles[msg.sender] == en_roles.PBF, "Sorry, you don't have authorized to access this!");
    _;
  }

  enum en_roles {
    Pabrik,
    PBF, 
    BPOM,
    Retailer
  }
  
  enum en_statusCert {
    Pending,
    Approved
  }

  enum en_jenisSediaan {
    TabletNonbetalaktam,
    KapsulKerasNonbetalaktam,
    SerbukOralNonbetalaktam,
    CairanOralNonbetalaktam
  }
  
  struct st_userData {
    string name;
    string instanceName;
    address userAddr;
    en_roles userRole; 
  }

  struct st_cpotbData {
    string cpotbId;
    string senderName;
    address factoryAddr;
    string factoryName;
    en_jenisSediaan jenisSediaan;
    en_statusCert status;
    uint timestampRequest;
    uint timestampApprove;
    string cpotbNumber;
    address bpomAddr;
    string receiverName;
  }

  struct st_cdobData {
    bytes cdobId;
    address pbfAddr;
    address bpomAddr;
    uint timestamp;
    bytes cdobNumber;
  }

  mapping (address => st_userData) private userData;
  mapping (address => en_roles) public userRoles; 
  mapping (address => bool) private isRegistered;
  mapping (string => st_cpotbData) cpotbData;
  mapping (string => st_cpotbData[]) public allCpotbDataByFactory;
  mapping (string => st_cpotbData) public cpotbDataById;
  st_cpotbData[] public allCpotbData;

  event evt_UserRegistered(address userAddr, string name, string instanceName, en_roles role);
  event evt_cpotbRequested(string senderName, address factoryAddr, string factoryName, en_jenisSediaan jenisSediaan, string cpotbId, uint timestampRequest);
  event evt_cpotbApproved(address bpomAddr, string receiverName, string factoryName, string cpotbNumber, uint timestampApprove);

  // Ensure that userRoles is correctly updated in registerUser
  function registerUser(
      string memory _name, 
      string memory _instanceName,
      address _userAddr,
      uint8 _userRole
  ) public {
      userData[_userAddr] = st_userData({
        name: _name,
        instanceName: _instanceName,
        userAddr: _userAddr,
        userRole: en_roles(_userRole)
      });

      userRoles[_userAddr] = en_roles(_userRole); // Ensures the role is set here

      isRegistered[_userAddr] = true;

      emit evt_UserRegistered(_userAddr, _name, _instanceName, en_roles(_userRole));  
  }


  function getRegisteredUser(address _userAddr) public view returns (address, string memory, string memory, uint8) {
      require(isRegistered[_userAddr], "User is not registered");

      st_userData memory user = userData[_userAddr];
      
      return (user.userAddr, user.name, user.instanceName, uint8(user.userRole)); 
  }

  function requestCpotb(
      string memory _instanceName,
      string memory _cpotbId,
      string memory _senderName,
      en_jenisSediaan _jenisSediaan,
      address _senderAddress 
  ) public onlyFactory {

      st_cpotbData memory newCpotbData = st_cpotbData({
          cpotbId: _cpotbId,
          senderName: _senderName,
          factoryAddr: msg.sender, 
          factoryName: _instanceName,
          jenisSediaan: en_jenisSediaan(_jenisSediaan), 
          status: en_statusCert.Pending,
          timestampRequest: block.timestamp,
          timestampApprove: 0,
          cpotbNumber: "",
          bpomAddr: address(0),
          receiverName: ""
      });

      cpotbDataById[_cpotbId] = newCpotbData;
      allCpotbDataByFactory[_instanceName].push(newCpotbData);
      allCpotbData.push(newCpotbData); 

      emit evt_cpotbRequested(_senderName, msg.sender, _instanceName, _jenisSediaan, _cpotbId, block.timestamp);
  }

  function approveCpotb(
    string memory _cpotbId,  
    string memory _cpotbNumber, 
    string memory _receiverName
  ) public onlyBPOM {
     
    st_cpotbData storage cpotbDatas =  cpotbData[_cpotbId];
    console.log("Current CPOTB status:", uint(cpotbDatas.status));
    require(cpotbDatas.status == en_statusCert.Pending, "CPOTB status must be pending!");
 
    cpotbDatas.status = en_statusCert.Approved;
    cpotbDatas.cpotbNumber = _cpotbNumber;
    cpotbDatas.timestampApprove = block.timestamp;
    cpotbDataById[_cpotbId] = cpotbDatas;

    emit evt_cpotbApproved(msg.sender, _receiverName, cpotbDatas.factoryName, _cpotbNumber, block.timestamp);
  }
  
  function getListCpotbByFactory(string memory _instanceName) 
    public view returns (
      uint8[] memory, 
      uint8[] memory, 
      uint256[] memory, 
      string[] memory) 
  {
      st_cpotbData[] storage cpotbDataArray = allCpotbDataByFactory[_instanceName];
      uint length = cpotbDataArray.length;

      uint8[] memory jenisSediaanArray = new uint8[](length);
      string[] memory cpotbIdArray = new string[](length);
      uint8[] memory statusArray = new uint8[](length);
      uint256[] memory latestTimestampArray = new uint256[](length);

      for (uint i = 0; i < length; i++) {
          st_cpotbData storage cpotbDatas = cpotbDataArray[i];

          jenisSediaanArray[i] = uint8(cpotbDatas.jenisSediaan);
          statusArray[i] = uint8(cpotbDatas.status);
          cpotbIdArray[i] = cpotbDatas.cpotbId;

          uint latest = cpotbDatas.timestampApprove > cpotbDatas.timestampRequest 
              ? cpotbDatas.timestampApprove 
              : cpotbDatas.timestampRequest;
          
          latestTimestampArray[i] = latest;
      }

      return (
        jenisSediaanArray, 
        statusArray, 
        latestTimestampArray, 
        cpotbIdArray);
  }
  
  function getListAllCpotb() 
    public view returns (
      uint8[] memory, 
      string[] memory, 
      uint8[] memory, 
      uint256[] memory, 
      string[] memory) 
  { 
    uint length = allCpotbData.length;

    uint8[] memory jenisSediaanArray = new uint8[](length);
    string[] memory cpotbIdArray = new string[](length);
    string[] memory factoryNameArray = new string[](length);
    uint8[] memory statusArray = new uint8[](length);
    uint256[] memory latestTimestampArray = new uint256[](length);

    for (uint i = 0; i < length; i++) {  
        st_cpotbData storage cpotbDatas = allCpotbData[i];

        jenisSediaanArray[i] = uint8(cpotbDatas.jenisSediaan);
        statusArray[i] = uint8(cpotbDatas.status);
        factoryNameArray[i] = cpotbDatas.factoryName; 
        cpotbIdArray[i] = cpotbDatas.cpotbId;

        uint latest = cpotbDatas.timestampApprove > cpotbDatas.timestampRequest 
            ? cpotbDatas.timestampApprove 
            : cpotbDatas.timestampRequest;
        
        latestTimestampArray[i] = latest; 
    }

    return (
      jenisSediaanArray, 
      factoryNameArray, 
      statusArray, 
      latestTimestampArray, 
      cpotbIdArray);  
  }  

  function getListCpotbById(string memory _cpotbId) public view returns(st_cpotbData memory) {
    require(bytes(cpotbDataById[_cpotbId].cpotbId).length > 0, "No data found for this ID.");

    return cpotbDataById[_cpotbId];
  }

  function getRole(address user) public view returns (en_roles, address) {
      return (userRoles[user], msg.sender);
  }


}
