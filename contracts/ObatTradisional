// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "hardhat/console.sol";

contract ObatTradisional {

  address public owner; 

  constructor() {
    owner = msg.sender;
  }

  modifier onlyFactory() { 
    require(userRoles[msg.sender] == en_roles.Pabrik, "Access restricted to Factory role");
    _;
  }

  modifier onlyBPOM() {
    require(userRoles[msg.sender] == en_roles.BPOM, "Access restricted to BPOM role");
    _;
  }

  enum en_obatStatus { inLocalProduction, Requested, Approved }
  enum en_orderStatus { inProduction, inShipment, inDelivery }
  enum en_roles { Pabrik, PBF, BPOM, Retailer }
  enum en_tipeProduk {obatTradisional, suplemenKesehatan}

  struct st_obatDetails {
    string obatId;
    string merk;
    string namaProduk;
    string klaim;
    string kemasan;
    string komposisi;
    en_tipeProduk tipeProduk;
    en_obatStatus obatStatus;      
    uint256 nieRequestDate;       
    uint256 nieApprovalDate;        
    string nieNumber;            
    address factoryAddr;  
    string factoryInstanceName;  
    string factoryUserName;        
    address bpomAddr;          
    string bpomInstanceName;       
    string bpomUserName;           
  }

  st_obatDetails[] public allObatData;

  mapping (address => en_roles) public userRoles;
  mapping (string => st_obatDetails) public obatDetailsById;

  event evt_obatCreated(string obatId, string namaProduk, string kemasan);
  event evt_nieRequested(string obatId, uint timestampRequested, string namaProduk);
  event evt_nieApproved(string nieNumber, uint timestampApprove, string namaProduk);
 
  function createObat(
    string memory _obatId,
    string memory _merk,
    string memory _namaProduk,
    string memory _klaim,
    string memory _kemasan,
    string memory _komposisi,
    address _factoryAddr,
    string memory _factoryInstanceName,
    string memory _factoryUserName,
    en_tipeProduk _tipeProduk
  ) public onlyFactory{

    st_obatDetails memory newObatDetails = st_obatDetails({
      obatId: _obatId,
      merk: _merk,
      namaProduk: _namaProduk,
      klaim: _klaim,
      kemasan: _kemasan,
      komposisi: _komposisi,
      tipeProduk: _tipeProduk,
      obatStatus: en_obatStatus.inLocalProduction,
      nieRequestDate: 0,
      nieApprovalDate: 0,      
      nieNumber: "",     
      factoryAddr: _factoryAddr,         
      factoryInstanceName: _factoryInstanceName,
      factoryUserName: _factoryUserName,   
      bpomAddr: address(0), 
      bpomInstanceName: "",      
      bpomUserName:"" 
    }); 

    obatDetailsById[_obatId] = newObatDetails;
    allObatData.push(newObatDetails);

    emit evt_obatCreated(_obatId, _namaProduk, _kemasan);
  } 

  function requestNie( string memory _obatId ) public onlyFactory {

    st_obatDetails storage obatDetails = obatDetailsById[_obatId];
    require(obatDetails.obatStatus == en_obatStatus.inLocalProduction, "Obat Tradisional status must be in local production!");

    obatDetails.nieRequestDate = block.timestamp;
    obatDetails.obatStatus = en_obatStatus.Requested;

    for (uint i = 0; i<allObatData.length; i++){
      if (keccak256(abi.encodePacked(allObatData[i].obatId)) == keccak256(abi.encodePacked(_obatId))) {
        allObatData[i].nieRequestDate = block.timestamp;
        allObatData[i].obatStatus = en_obatStatus.Requested;

        break;
      }
    }

    emit evt_nieRequested(_obatId, block.timestamp, obatDetails.namaProduk);
  } 

  function approveNie(
    string memory _obatId,
    address _bpomAddr,
    string memory _bpomInstanceName,
    string memory _bpomUserName,
    string memory _nieNumber
  ) public onlyBPOM {

    st_obatDetails storage obatDetails = obatDetailsById[_obatId];
    require(obatDetails.obatStatus == en_obatStatus.Requested, "Obat Tradisional status must be requested!");

    obatDetails.nieApprovalDate = block.timestamp;
    obatDetails.obatStatus = en_obatStatus.Approved;
    obatDetails.nieNumber = _nieNumber;
    obatDetails.bpomAddr = _bpomAddr;
    obatDetails.bpomInstanceName = _bpomInstanceName;
    obatDetails.bpomUserName = _bpomUserName;

    for (uint i = 0; i<allObatData.length; i++){
      if (keccak256(abi.encodePacked(allObatData[i].obatId)) == keccak256(abi.encodePacked(_obatId))) {
        allObatData[i].nieApprovalDate = block.timestamp;
        allObatData[i].obatStatus = en_obatStatus.Approved;
        allObatData[i].nieNumber = _nieNumber;
        allObatData[i].bpomAddr = _bpomAddr;
        allObatData[i].bpomInstanceName = _bpomInstanceName;
        allObatData[i].bpomUserName = _bpomUserName;

        break;
      }
    }

    emit evt_nieApproved(_nieNumber, block.timestamp, obatDetails.namaProduk);
  } 

  function getListObatByFactory (string memory _factoryInstanceName) 
    public view returns (
      string[] memory, //idobat
      string[] memory, //namaproduk
      uint8[] memory ) //status
  {
      st_obatDetails[] memory obatArray = new st_obatDetails[](allObatData.length);

      uint length = 0;

      for (uint i = 0; i<allObatData.length; i++){
        if(keccak256(abi.encodePacked(allObatData[i].factoryInstanceName)) == keccak256(abi.encodePacked(_factoryInstanceName))) {
          obatArray[length] = allObatData[i];
          length++;
        }
      }
 
      uint8[] memory obatStatusArray = new uint8[](length);
      string[] memory obatIdArray = new string[](length);
      string[] memory namaProdukArray = new string[](length);

      for(uint i=0; i<length; i++){
        obatStatusArray[i] = uint8(obatArray[i].obatStatus);
        obatIdArray[i] = obatArray[i].obatId;
        namaProdukArray[i] = obatArray[i].namaProduk;
      }

      return(
        obatIdArray,
        namaProdukArray,
        obatStatusArray 
      ); 
  }

  function getListAllObat ()  
    public view returns (
      string[] memory, //idobat
      string[] memory, //namaproduk
      string[] memory,
      uint8[] memory ) //status
  {
      uint length = allObatData.length;
 
      uint8[] memory obatStatusArray = new uint8[](length);
      string[] memory obatIdArray = new string[](length);
      string[] memory namaProdukArray = new string[](length);
      string[] memory factoryInstanceNameArray = new string[](length);

      for(uint i=0; i<length; i++){
        obatStatusArray[i] = uint8(allObatData[i].obatStatus);
        obatIdArray[i] = allObatData[i].obatId;
        namaProdukArray[i] = allObatData[i].namaProduk;
        factoryInstanceNameArray[i] = allObatData[i].factoryInstanceName;
      }

      return(
        obatIdArray,
        namaProdukArray,
        factoryInstanceNameArray,
        obatStatusArray 
      ); 
  }

  function getListObatById(string memory _obatId) public view returns(st_obatDetails memory) {
    require(bytes(obatDetailsById[_obatId].obatId).length > 0, "No data found with this ID.");
    return obatDetailsById[_obatId];
  }

}